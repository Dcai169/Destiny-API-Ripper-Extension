TODO
In order of priority (mostly)

UI/UX
* Implement filters
    * Armor
        * Class (Hunter, Titan, Warlock)
        * Armor Type (Head, Chest, Arms, Legs, Class)
    * Weapons
        * Ammo Type (Primary, Secondary, Heavy)
        * Damage Type (Kinetic, Void, Solar, Arc, Stasis)
        * Weapon Type (Shotty, LMG, Auto, Pulse, etc)
    * Rarity
    * Events
* Sorting
    * Name
    * Item Type
    * Ammo/Class
    * Rarity
* Add User Preferences (Default output path, Sorting order, Show folder after rip)
    * Add a locale picker (en, de, fr, pl, ru, es-mx, pt-br, etc)
* Add button to reload item_definitions.json from Bnet API
* Check internet connection before ripping
* Add button to item-tile to bypass using the queue (ie a RIP NOW button)
* Implement user supplied hash (USP) queue items
* Restore previous session (Queue, Active filters, Search Query, etc)
* Add mass selection mode

Ripping
* Handle errors (Invalid hash, etc)
* Add Destiny 1 support
    * Aquire Destiny 1 manifest
    * MUST NOT allow d1 and d2 queues hashes to be ripped in the same command

Maintainance/Updates
* CGT
    * Check for update (probably on startup)
    * Aquire Collada Generator Tool (CGT) from GitHub API 
    * Check CGT hash
    * Unpack CGT
    * Update CGT Path
* Cache
    * Keep local copy of item_definitions.json
* Destiny Manifest
    * Read manifest from Bnet API (Once every three monthsish)
    * Filter manifest to only rippable items (NO Default shader/ornament/solstice glows/event items)
    * Update local copy

DONE
* Put items back into #item-container in the correct order by using .after() instead of .append()
* Implement search
* Add darkmode
* Add season badges to icons
* Implement API Ripping
    * Call CGT with proper command line arguments
